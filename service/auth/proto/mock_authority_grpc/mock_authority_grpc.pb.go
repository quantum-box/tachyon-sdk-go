// Code generated by MockGen. DO NOT EDIT.
// Source: authority_grpc.pb.go

// Package mock_authpb is a generated GoMock package.
package mock_authpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/quantum-box/tachyon-sdk-go/service/auth/proto"
	grpc "google.golang.org/grpc"
)

// MockAuthorityApiClient is a mock of AuthorityApiClient interface.
type MockAuthorityApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorityApiClientMockRecorder
}

// MockAuthorityApiClientMockRecorder is the mock recorder for MockAuthorityApiClient.
type MockAuthorityApiClientMockRecorder struct {
	mock *MockAuthorityApiClient
}

// NewMockAuthorityApiClient creates a new mock instance.
func NewMockAuthorityApiClient(ctrl *gomock.Controller) *MockAuthorityApiClient {
	mock := &MockAuthorityApiClient{ctrl: ctrl}
	mock.recorder = &MockAuthorityApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorityApiClient) EXPECT() *MockAuthorityApiClientMockRecorder {
	return m.recorder
}

// VerifyToken mocks base method.
func (m *MockAuthorityApiClient) VerifyToken(ctx context.Context, in *proto.AuthorizeTokenRequest, opts ...grpc.CallOption) (*proto.AuthorizeTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VerifyToken", varargs...)
	ret0, _ := ret[0].(*proto.AuthorizeTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthorityApiClientMockRecorder) VerifyToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthorityApiClient)(nil).VerifyToken), varargs...)
}

// MockAuthorityApiServer is a mock of AuthorityApiServer interface.
type MockAuthorityApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorityApiServerMockRecorder
}

// MockAuthorityApiServerMockRecorder is the mock recorder for MockAuthorityApiServer.
type MockAuthorityApiServerMockRecorder struct {
	mock *MockAuthorityApiServer
}

// NewMockAuthorityApiServer creates a new mock instance.
func NewMockAuthorityApiServer(ctrl *gomock.Controller) *MockAuthorityApiServer {
	mock := &MockAuthorityApiServer{ctrl: ctrl}
	mock.recorder = &MockAuthorityApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorityApiServer) EXPECT() *MockAuthorityApiServerMockRecorder {
	return m.recorder
}

// VerifyToken mocks base method.
func (m *MockAuthorityApiServer) VerifyToken(arg0 context.Context, arg1 *proto.AuthorizeTokenRequest) (*proto.AuthorizeTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", arg0, arg1)
	ret0, _ := ret[0].(*proto.AuthorizeTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthorityApiServerMockRecorder) VerifyToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthorityApiServer)(nil).VerifyToken), arg0, arg1)
}

// mustEmbedUnimplementedAuthorityApiServer mocks base method.
func (m *MockAuthorityApiServer) mustEmbedUnimplementedAuthorityApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthorityApiServer")
}

// mustEmbedUnimplementedAuthorityApiServer indicates an expected call of mustEmbedUnimplementedAuthorityApiServer.
func (mr *MockAuthorityApiServerMockRecorder) mustEmbedUnimplementedAuthorityApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthorityApiServer", reflect.TypeOf((*MockAuthorityApiServer)(nil).mustEmbedUnimplementedAuthorityApiServer))
}

// MockUnsafeAuthorityApiServer is a mock of UnsafeAuthorityApiServer interface.
type MockUnsafeAuthorityApiServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthorityApiServerMockRecorder
}

// MockUnsafeAuthorityApiServerMockRecorder is the mock recorder for MockUnsafeAuthorityApiServer.
type MockUnsafeAuthorityApiServerMockRecorder struct {
	mock *MockUnsafeAuthorityApiServer
}

// NewMockUnsafeAuthorityApiServer creates a new mock instance.
func NewMockUnsafeAuthorityApiServer(ctrl *gomock.Controller) *MockUnsafeAuthorityApiServer {
	mock := &MockUnsafeAuthorityApiServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthorityApiServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthorityApiServer) EXPECT() *MockUnsafeAuthorityApiServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthorityApiServer mocks base method.
func (m *MockUnsafeAuthorityApiServer) mustEmbedUnimplementedAuthorityApiServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthorityApiServer")
}

// mustEmbedUnimplementedAuthorityApiServer indicates an expected call of mustEmbedUnimplementedAuthorityApiServer.
func (mr *MockUnsafeAuthorityApiServerMockRecorder) mustEmbedUnimplementedAuthorityApiServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthorityApiServer", reflect.TypeOf((*MockUnsafeAuthorityApiServer)(nil).mustEmbedUnimplementedAuthorityApiServer))
}
